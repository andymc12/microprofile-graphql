//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[mutations]]

While queries are intended for clients to read data, mutations are intended to modify data. Mutations may create new
entities or update or delete existing entities. 

==== API Annotation
Like queries, mutation methods must be in a class annotated with the `@GraphQLApi` annotation.

The `@Mutation` annotation is defined in the API:

.Mutation Annotation
[source,java,numbered]
----
package org.eclipse.microprofile.graphql;

//...

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Mutation {
    String value() default "";
    String description() default "";
}
----

.Parameters
[cols="1,1"]
|===
|*value*|Overrides the mutation name in the resulting schema, default will be the method name
|*description*|Sets a description for the mutation, default will be null (no description)
|===

Mutations generally require arguments (parameters) in order to determine which entity to modify/delete or the data
necessary to create a new entity, etc. These arguments are the parameters of the mutation method and should be annotated
with `@Argument`.  The `@Argument` annotation's value is used to specify the name of the argument. The argument name
will be used in the generated schema. Arguments can be GraphQL scalars or more complex input types (for more information
on input types, see <<entities.asciidoc#types,Entities, Types vs InputTypes>>).

==== Basic POJO Examples

.Create Example
[source,java,numbered]
----
@Mutation
public SuperHero createNewHero(@Argument("hero") SuperHero newHero) 
    throws DuplicateSuperHeroException {

    heroDB.addHero(newHero);
    return heroDB.getHero(newHero.getName());
}
----

.Delete Example
[source,java,numbered]
----
@Mutation
@Mutation
public SuperHero removeHero(@Argument("hero") String heroName)
    throws UnknownHeroException {

    SuperHero removedHero = heroDB.removeHero(heroName);
    if (removedHero == null) {
        throw new UnknownHeroException(heroName);
    }
    return removedHero;
    }
----

.Update Example
[source,java,numbered]
----
@Mutation
public SuperHero addNewPowerToHero(@Argument("hero") SuperHero hero,
                                   @Argument("newPower") String newPower)
                                   throws UnknownHeroException {

    SuperHero heroFromDB = heroDB.getHero(newHero.getName());
    if (heroFromDB == null) {
        throw new UnknownHeroException(hero.getName());
    }
    heroFromDB.getSuperPowers().add(newPower);
    return heroFromDB;
}
----